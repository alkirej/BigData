1. github is a distributed/decentralized rcs/vcs (revision/version control system)

2. git workflow:
  1- edit your (working) copy of a file from the repository
  2- (add) the file to the staging area with git add <filename>
  3- (commit) the changes to the local repository with git commit
  4- (push) the changes to the github repository with git push
  
3. git vocab:
  blob     - binary large object 
  tree     - directory structure
  commit   - links to previous version of the file
  branch   - standard rcs branch - single codeline within a project
  tag      - immutable branch (such as a production release)
  clone    - check out the working copy and mirror complete repository
  pull     - copies changes from remote repository to the local one
  push     - move commits from local repository to a remote one
  head     - "points" to the latest commit in a branch (aka: the latest commit or most up to date)
  revision - a version of the source code (represented by commits)
  url      - represents the location of a git repository (stored  in the config file)
  
4. Install git client (Debian Linus)
  sudo apt-get install git-core
  git --version
  
  # customize the git environment
  git config --global user.name "Jeff Alkire"
  git config --global user.email "jeff@alkire.net"
  
  # you can use this to avoid default merge commits
  git config --global branch.autosetuprebase always
  
  # use these to enable color highlighting in the git console
  git config --global color.ui true
  git config --global color.status auto
  git config --global color.branch auto
  
  # set the default editor
  git config --global core.editor vi
  
  # set a default merge tool
  git config --global merge.tool vimdiff
  
  # list config settings
  git config --list
  
5. git life cycle
  a-clone git repo as a working copy
  b-modify working copy by adding/deleting/modifying files
  c-take other developer's changes (if needed)
  d-review your changes (BEFORE COMMITTING THEM)
  e-commit your changes and push them to the repository
  f-find another bug, correct last commit and push changes

6-How to create a remote git repo
  a-create new user:
    #add unix group
    groupadd dev
    #add unix user
    useradd -G dev -d /home/gituser -m -s /bin/bash gituser
    # supply a password to the user
  b-create bare repo
    mkdir project.git
    cd project.git
    git --bare init
    passwd gituser
  c-generate public/private key pair and upload to github.com
  d-clone a copy of the repository to your local machine (copy)
    git clone git@github.com:alkirej/BigData
  NOTE: git status -s --> (-s = silent flag) creates a easier to read status report
  NOTE: git log --> lists commits starting with the most recent and moving backwards through time
        git log -3 --> list last 3 commits
  e-add a file to the repo
    git add <filename>
7-Editing a file
  a-edit file in text editor
  b-git add <filename>  --> tells github we are editing this file
  c-git commit --> done with changes
  d-git log    --> show the commit log (and id for each commit)
  e-git show <commit id>  --> shows edits to the file (diff)
8-"Stash" changes until I can work on them again
  git stash --> will stash your changes
  git stash list --> will show you what you have stashed away
  git stash pop  --> will restore your most previous stash
  
  Stashing allows current changes to be stored away while you work on 
  a different branch of the code.
9-Move / Rename file
  git mv <filename> <newfilename or location>
  move a file to a new location or rename it
  (similar to unix mv command)
10-Delete file from github
  git rm <filename>
  deletes a file (once committed) from the repo
11-Revert to previous version after commit
  git checkout <filename>
12-Revert to to HEAD (latest) version of file
  git checkout HEAD -- <filename>
13-Move the HEAD location
  git reset ...
14-Tag a version as immutable (production version)
  git tag -a '<release>' -m '<message>' HEAD
  HEAD can be replaced with a commit id
  
  git tag  --> shows previously tags
  git tag -d '<release>' --> delete the specified tag
15-Patches
  git has a git format-patch ... command that allows patches to be made
  git apply ... will apply the patch
16-Branches
  git branch --> displays current branch
  git branch <new branch name> --> creates a new branch (but does not make it active)
  git checkout <branch name> --> switches to a new branch
  git checkout -b <new branch name> --> create and switch to a new branch
  git branch -D <branch name> --> delete a branch (MOVE TO ANOTHER BRFANCH FIRST)
  git branch -m <old branch name> <new branch name> --> rename a branch
  git merge ... will merge 2 branches together